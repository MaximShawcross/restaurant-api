using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using RestoranApi.DTOs;
using RestoranApi.Models;
using RestoranApi.Services;
using RestoranApi.Services.Interfaces;

namespace RestoranApi.Controllers
{
    [Route("user")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        private readonly RestaurantContext _context;
        private readonly ILoginService _loginService;
        private readonly IRoleToDto _roleToDtoService;
        private readonly IUserToDtoService _userToDtoService;

        public UsersController(
            RestaurantContext context, ILoginService loginService, 
            IRoleToDto roleToDtoService, IUserToDtoService userToDtoService
        )
        {
            _context = context;
            _loginService = loginService;
            _roleToDtoService = roleToDtoService;
            _userToDtoService = userToDtoService;
        }

        #region CustomEndpoints
        
        [AllowAnonymous]
        [HttpPost("login")]
        public async Task<JwtToken> Login([FromBody] UserLoginDto userDto)
        {
            User user = await _loginService.Authenticate(userDto);
            string token = await _loginService.CreateToken(user);

            return new JwtToken() {Token = token};
        }
        
        [Authorize]
        [HttpGet("GetUsersWithAllTheirRoles")]
        public async Task<ActionResult<IEnumerable<UserWithRolesDto>>> GetUserRoles()
        {
            
            return await _context.Users.Include(u => u.Roles)
                .Select(u => new UserWithRolesDto()
                {
                    Id = u.Id,
                    Email = u.Email,
                    CurrentDomainId = u.CurrentDomainId,
                    Name = u.Name,
                    Roles = _roleToDtoService.RoleToDto(u.Roles).ToList()
                })
                .ToListAsync();
        }
        
        [Authorize]
        [HttpPost("AssignUserWithRole")]
        public async Task<ActionResult<UserRoles>> PostUserRoles([FromBody] UserRolesDto  userRolesDto)
        {
            UserRoles userRole = new UserRoles()
            {
                RoleId = userRolesDto.RoleId,
                UserId = userRolesDto.UserId
            };
            
            _context.UserRoles.Add(userRole);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetUserRoles", new { id = userRole.Id }, userRole);
        }
        #endregion

        #region AutogeneratedEndpoints
        
        // GET: api/Users
        [HttpGet]
        [Authorize]
        public async Task<ActionResult<IEnumerable<UserDto>>> GetUsers()
        {
            var users = await _context.Users.ToListAsync();
            var isAdmin = HttpContext.User.Claims.FirstOrDefault(u => u.Type == "IsAdmin");

            Console.WriteLine("IsAdmin: {0}", isAdmin);
            
            return Ok(_userToDtoService.UserToDto(users));
        }

        
        // GET: api/Users/5
        [Authorize]
        [HttpGet("{id}")]
        public async Task<ActionResult<UserDto>> GetUser(int id)
        {
            var user = await _context.Users.FindAsync(id);

            if (user == null)
            {
                return NotFound();
            }

            return _userToDtoService.UserToDto(user);
        }

        // PUT: api/Users/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize]
        [HttpPut("{id}")]
        public async Task<IActionResult> PutUser(int id, User user)
        {
            if (id != user.Id)
            {
                return BadRequest();
            }

            _context.Entry(user).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UserExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Users
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [Authorize]
        [HttpPost]
        public async Task<ActionResult<User>> PostUser(User user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetUser", new { id = user.Id }, user);
        }

        // DELETE: api/Users/5
        [Authorize]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            _context.Users.Remove(user);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool UserExists(int id)
        {
            return (_context.Users?.Any(e => e.Id == id)).GetValueOrDefault();
        }
        #endregion

       
        

    }
}